import SwiftUI

struct ReportNavigationView: View {
  @State private var phoneNumber: String = ""
  @State private var showAlert = false
  @State private var alertMessage = ""
  @FocusState private var isPhoneFieldFocused: Bool

  var body: some View {
    NavigationView {
      ScrollView {
        VStack {
          GroupBox(
            label:
              Label(
                "Signaler un numÃ©ro (Beta)",
                systemImage: "phone.fill.badge.plus"
              )
          ) {
            VStack(alignment: .leading) {
              Text(
                "Dans le but d'amÃ©liorer le blocage des appels et SMS indÃ©sirables, il est possible de signaler les numÃ©ros qui ne sont pas bloquÃ©s par l'application. Cela contribuera Ã  Ã©tablir une liste de blocage et Ã  rendre l'application plus efficace."
              )
              .font(.body)
              .padding(.top, 4)
              .frame(maxWidth: .infinity, alignment: .leading)

              Text(
                "Saisissez le numÃ©ro de tÃ©lÃ©phone au format E.164 (ex: +33612345678)"
              )
              .fontWeight(.semibold)
              .padding(.top, 4)
              .frame(maxWidth: .infinity, alignment: .leading)

              TextField("NumÃ©ro au format E.164", text: $phoneNumber)
                .keyboardType(.phonePad)
                .textInputAutocapitalization(.never)
                .autocorrectionDisabled(true)
                .padding(8)
                .font(.title3)
                .background(Color(.white))
                .cornerRadius(8)
                .focused($isPhoneFieldFocused)
                .toolbar {
                  ToolbarItemGroup(placement: .keyboard) {
                    Spacer()
                    Button("TerminÃ©") {
                      isPhoneFieldFocused = false
                    }
                    .fontWeight(.semibold)
                  }
                }
              Button {
                submitPhoneNumber()
              } label: {
                HStack {
                  Image(systemName: "paperplane.fill")
                  Text("Envoyer")
                }
              }
              .buttonStyle(
                .fullWidth(background: Color("AppColor"), foreground: .black)
              )
              .padding(.top, 4)
            }
          }
          .background(Color(.systemGray6))
          .clipShape(RoundedRectangle(cornerRadius: 12, style: .continuous))

          DisclosureGroup(
            content: {
              Text(
                "Le service 33700 est un service gratuit mis en place par les opÃ©rateurs de tÃ©lÃ©phonie mobile pour signaler les appels et SMS indÃ©sirables. Il permet aux utilisateurs de signaler les numÃ©ros directement auprÃ¨s de leur opÃ©rateur, qui peut ensuite prendre des mesures pour bloquer ces numÃ©ros."
              )
              .font(.body)
              .padding(.top, 4)
              .frame(maxWidth: .infinity, alignment: .leading)

              Button {
                if let url = URL(
                  string:
                    "https://www.33700.fr/"
                ) {
                  UIApplication.shared.open(url)
                }
              } label: {
                HStack {
                  Image(systemName: "flag.fill")
                  Text("AccÃ©der au service 33700")
                }
              }
              .buttonStyle(
                .fullWidth(background: Color("AppColor"), foreground: .black)
              )
              .padding(.top)
            },
            label: {
              Label(
                "Service 33700",
                systemImage: "flag.fill"
              )
              .font(.headline)
            }
          )
          .padding()
          .background(Color(.systemGray6))
          .clipShape(RoundedRectangle(cornerRadius: 12, style: .continuous))

          DisclosureGroup(
            content: {
              Text(
                "Pour connaÃ®tre l'opÃ©rateur d'un numÃ©ro, vous pouvez utiliser le service gratuit de l'ARCEP. Le service est accessible via le lien ci-dessous. Il vous suffit de saisir le numÃ©ro de tÃ©lÃ©phone pour obtenir des informations sur l'opÃ©rateur."
              )
              .font(.body)
              .padding(.top, 4)
              .frame(maxWidth: .infinity, alignment: .leading)

              Button {
                if let url = URL(
                  string:
                    "https://www.arcep.fr/mes-demarches-et-services/entreprises/fiches-pratiques/base-numerotation.html"
                ) {
                  UIApplication.shared.open(url)
                }
              } label: {
                HStack {
                  Image(systemName: "person.fill.questionmark")
                  Text("Connaitre l'opÃ©rateur")
                }
              }
              .buttonStyle(
                .fullWidth(background: Color("AppColor"), foreground: .black)
              )
              .padding(.top)
            },
            label: {
              Label(
                "Connaitre l'opÃ©rateur du numÃ©ro",
                systemImage: "person.fill.questionmark"
              )
              .font(.headline)
            }
          )
          .padding()
          .background(Color(.systemGray6))
          .clipShape(RoundedRectangle(cornerRadius: 12, style: .continuous))
        }
        .padding(.horizontal)
      }
      .navigationTitle("Signaler")
      .alert(isPresented: $showAlert) {
        Alert(
          title: Text("Information"),
          message: Text(alertMessage),
          dismissButton: .default(Text("OK"))
        )
      }
      .onTapGesture {
        isPhoneFieldFocused = false
      }
    }
  }

  private func submitPhoneNumber() {
    let e164Regex = "^\\+[1-9]\\d{7,14}$"
    if !phoneNumber.matches(e164Regex) {
      alertMessage = "Le numÃ©ro doit Ãªtre au format E.164 (ex: +33612345678)."
      showAlert = true
      return
    }
    guard let url = URL(string: Config.reportServerURL) else {
      alertMessage = "URL invalide."
      showAlert = true
      return
    }
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    request.setValue("application/json", forHTTPHeaderField: "Content-Type")
    let deviceId = UIDevice.current.identifierForVendor?.uuidString ?? "unknown"
    let appVersion =
      Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String
      ?? "unknown"
    let json: [String: String] = [
      "number": phoneNumber,
      "deviceId": deviceId,
      "appVersion": appVersion,
    ]
    do {
      let jsonData = try JSONSerialization.data(
        withJSONObject: json,
        options: []
      )
      request.httpBody = jsonData
    } catch {
      alertMessage = "Erreur lors de la crÃ©ation du JSON."
      showAlert = true
      return
    }
    let task = URLSession.shared.dataTask(with: request) {
      data,
      response,
      error in
      DispatchQueue.main.async {
        if let error = error {
          alertMessage =
            "Erreur lors de l'envoi : \(error.localizedDescription)"
        } else {
          alertMessage =
            "NumÃ©ro signalÃ© avec succÃ¨s ! Merci de votre contribution ðŸ˜˜."
          phoneNumber = ""
        }
        showAlert = true
      }
    }
    task.resume()
  }
}

extension String {
  fileprivate func matches(_ regex: String) -> Bool {
    return self.range(of: regex, options: .regularExpression) != nil
  }
}
