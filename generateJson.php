<?php

$csvFile = 'MAJNUM.csv';
$jsonFile = 'saracroche/prefixes.json';

// D√©finir ici les op√©rateurs √† inclure. Laisser vide pour tout inclure.
$blockedOperators = [
  'DVSC',
  'LGC',
  'ZETE',
  'OXIL',
  'BJTP',
  'UBIC',
  'OPEN',
  'KAVE',
  'SPAR',
];

$handle = fopen($csvFile, 'r');
$output = [];

// Ajouter les pr√©fixes Arcep
$arcepPrefixes = [
  '33162',
  '33163',
  '33270',
  '33271',
  '33377',
  '33378',
  '33424',
  '33425',
  '33568',
  '33569',
  '33948',
  '33949',
  '339475',
  '339476',
  '339477',
  '339478',
  '339479',
];

foreach ($arcepPrefixes as $prefix) {
  $nbDigitsToFill = 11 - strlen($prefix);
  $pattern = $prefix . str_repeat('#', $nbDigitsToFill);
  $output[] = [
    'operator' => 'ARCEP',
    'prefix' => $pattern
  ];
}

if ($handle !== false) {
  $headers = fgetcsv($handle, 1000, ';', '"', "\n"); // Lire l'en-t√™te
  $headers = array_map(function ($h) {
    return mb_convert_encoding($h, 'UTF-8', 'ISO-8859-1');
  }, $headers);

  while (($data = fgetcsv($handle, 1000, ';', '"', "\n")) !== false) {
    // Convertir chaque champ en UTF-8
    $data = array_map(function ($d) {
      return mb_convert_encoding($d, 'UTF-8', 'ISO-8859-1');
    }, $data);
    $row = array_combine($headers, $data);

    $ezabpqm = $row['EZABPQM'];
    $operator = $row['Mn√©mo'];

    if (in_array($operator, $blockedOperators) && preg_match('/^\d+$/', $ezabpqm)) {
      // Retirer le premier 0 si pr√©sent
      $ezabpqm = ltrim($ezabpqm, '0');

      // Cr√©er le pr√©fixe E.164 : +33 + EZABPQM
      $numericPrefix = '33' . $ezabpqm;

      echo "üîç Pr√©fixe trouv√© : $numericPrefix pour l'op√©rateur $operator\n";

      // V√©rifier qu'un pr√©fixe ne commence par un pr√©fixe d√©j√† existant dans la liste $arcepPrefixes
      $isPrefixBlocked = false;
      foreach ($arcepPrefixes as $arcepPrefix) {
        if (strpos($numericPrefix, $arcepPrefix) === 0) {
          echo "‚ùå Pr√©fixe $numericPrefix est d√©j√† bloqu√© par le pr√©fixe ARCEP : $arcepPrefix\n";
          $isPrefixBlocked = true;
          break;
        }
      }

      if ($isPrefixBlocked) {
        continue; // Passer √† l'it√©ration suivante si le pr√©fixe est bloqu√©
      }

      $nbDigitsToFill = 11 - strlen($numericPrefix); // max E.164: 11 digits
      $pattern = $numericPrefix . str_repeat('#', $nbDigitsToFill);

      $output[] = [
        'operator' => $operator,
        'prefix' => $pattern
      ];
    }
  }

  fclose($handle);
}

// √âcriture JSON
file_put_contents($jsonFile, json_encode($output, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));

// Calculer le nombre total de num√©ros possibles pour chaque pr√©fixe dans $output
$totalNumbers = 0;

foreach ($output as $entry) {
  $prefix = $entry['prefix'];
  $numHashes = substr_count($prefix, '#');
  $possibleNumbers = pow(10, $numHashes);
  $totalNumbers += $possibleNumbers;
}

echo "‚úÖ Fichier JSON g√©n√©r√© avec succ√®s !\n";
echo "üü∞ Nombre total de num√©ros possibles pour tous les pr√©fixes : {$totalNumbers}\n";
echo "üóÇÔ∏è Fichier JSON g√©n√©r√© : $jsonFile\n";
